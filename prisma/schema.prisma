// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  idPerson  String   @id @default(uuid()) @map("id_person")
  name      String
  cpf       String   @unique
  birthday  DateTime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  address   Address?
  contact   Contact?
  user      User?

  @@map("person")
}

model Address {
  idAddress   String   @id @default(uuid()) @map("id_address")
  cep         String
  estado      String
  numero      String?
  complemento String?
  cidade      String
  bairro      String
  logradouro  String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  idPerson    String   @unique @map("id_person")
  person      Person   @relation(fields: [idPerson], references: [idPerson], onDelete: Cascade)

  @@map("address")
}

model Contact {
  idContact String   @id @default(uuid()) @map("id_contact")
  phone     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  idPerson  String   @unique @map("id_person")
  person    Person   @relation(fields: [idPerson], references: [idPerson], onDelete: Cascade)

  @@map("contact")
}

model User {
  idUser         String          @id @default(uuid()) @map("id_user")
  email          String          @unique
  passwordHash   String          @map("passowrd_hash")
  status         String          @default("ATIVO")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  idPerson       String          @unique @map("id_person")
  person         Person          @relation(fields: [idPerson], references: [idPerson], onDelete: Cascade)
  profile        Profile?
  profilePicture ProfilePicture?
  object         Object[]
  comment        Comment[]
  favorite       Favorite[]

  @@map("user")
}

model Profile {
  idProfile String   @id @default(uuid()) @map("id_profile")
  type      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  idUser    String   @unique @map("id_user")
  user      User     @relation(fields: [idUser], references: [idUser], onDelete: Cascade)

  @@map("profile")
}

model ProfilePicture {
  idProfilePicture String   @id @default(uuid()) @map("id_profile_picture")
  name             String
  path             String
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  idUser           String   @unique @map("id_user")
  user             User     @relation(fields: [idUser], references: [idUser], onDelete: Cascade)

  @@map("profile_picture")
}

model Object {
  idObject      String         @id @default(uuid()) @map("id_object")
  name          String
  description   String
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  idUser        String         @map("id_user")
  user          User           @relation(fields: [idUser], references: [idUser], onDelete: Cascade)
  idCategory    String         @map("id_category")
  category      Category       @relation(fields: [idCategory], references: [idCategory], onDelete: Cascade)
  idSubcategory String         @map("id_subcategory")
  subcategory   Subcategory    @relation(fields: [idSubcategory], references: [idSubcategory], onDelete: Cascade)
  objectPicture ObjectPicture?
  objectFile    ObjectFile?
  tag           Tag[]
  comment       Comment[]
  favorite      Favorite[]

  @@map("object")
}

model ObjectPicture {
  idObjectPicture String   @id @default(uuid()) @map("id_object_picture")
  name            String
  path            String
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  idObject        String   @unique @map("id_object")
  object          Object   @relation(fields: [idObject], references: [idObject], onDelete: Cascade)

  @@map("object_picture")
}

model ObjectFile {
  idObjectFile String   @id @default(uuid()) @map("id_object_file")
  name         String
  path         String
  mimetype     String   @map("mimetype")
  size         Int
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  idObject     String   @unique @map("id_object")
  object       Object   @relation(fields: [idObject], references: [idObject], onDelete: Cascade)

  @@map("object_file")
}

model Comment {
  idComment   String   @id @default(uuid()) @map("id_comment")
  idUser      String   @map("id_user")
  user        User     @relation(fields: [idUser], references: [idUser], onDelete: Cascade)
  idObject    String   @map("id_object")
  object      Object   @relation(fields: [idObject], references: [idObject], onDelete: Cascade)
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("comment")
}

model Favorite {
  idFavorite String   @id @default(uuid()) @map("id_favorite")
  idUser     String   @map("id_user")
  user       User     @relation(fields: [idUser], references: [idUser], onDelete: Cascade)
  idObject   String   @map("id_object")
  object     Object   @relation(fields: [idObject], references: [idObject], onDelete: Cascade)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("favorite")
}

model Category {
  idCategory  String        @id @default(uuid()) @map("id_category")
  name        String        @unique
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  subcategory Subcategory[]
  object      Object[]

  @@map("category")
}

model Subcategory {
  idSubcategory String   @id @default(uuid()) @map("id_subcategory")
  name          String   @unique
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  idCategory    String   @map("id_category")
  category      Category @relation(fields: [idCategory], references: [idCategory])
  object        Object[]

  @@map("subcategory")
}

model Tag {
  idTag     String   @id @default(uuid()) @map("id_tag")
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  object    Object[]

  @@map("tag")
}
